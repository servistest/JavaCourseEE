<?xml version="1.0" encoding="UTF-8"?>
<beans
        xmlns="http://www.springframework.org/schema/beans"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
        xmlns:jee="http://www.springframework.org/schema/jee" xmlns:mvc="http://www.springframework.org/schema/tool"
        xmlns:jdbc="http://www.springframework.org/schema/jdbc"
        xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee.xsd http://www.springframework.org/schema/tool http://www.springframework.org/schema/tool/spring-tool.xsd http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd">

   <!--Если приложению требуется только поддержка DI, то с контейнером DI в Spring-->
   <!--можно взаимодействовать через интерфейс BeanFactory. В этом случае приложение-->
   <!--должно создать экземпляр класса, реализующего интерфейс BeanFactory,-->
   <!--и сконфиrурировать его в соответствие с информацией о бине и зависимостях.-->
   <!--После того, как это сделано, приложение может получать доступ к бинам через-->
   <!--BeanFactory и пользоваться их обработкой.-->
   <!--В ряде случаев вся настройка подобного-->
   <!--рода производится автоматически (например, в веб-приложении экземпляр-->
   <!--ApplicationContext будет загружаться веб-контейнером во время начальной загрузки-->
   <!--приложения с помощью класса ContextLoaderListener, предоставляемого-->
   <!--Spring, который объявлен в файле дескрипторов web. xml). Но во многих случаях-->
   <!--кодировать настройку приходится самостоятельно. Все примеры, приведенные в-->
   <!--этой главе, требуют ручной настройки реализации BeanFactory.-->
   <import resource="rest-context.xml"/>
   <context:component-scan base-package="edu.mvc"/>

   <context:annotation-config/>

   <!--<tx:annotation-driven transaction-manager="transactionManager"/>-->


   <!--<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">-->
      <!--<property name="entityManagerFactory" ref="emf"/>-->
   <!--</bean>-->

   <!--<bean id="transactionTemplate" class="org.springframework.transaction.support.TransactionTemplate">-->
      <!--<property name="propagationBehaviorName" value="PROPAGATION_NEVER"/>-->
      <!--<property name="timeout" value="30"/>-->
      <!--<property name="transactionManager" ref="transactionManager"/>-->
   <!--</bean>-->

   <!--<jpa:repositories base-package="edu.resttemplate"-->
                     <!--entity-manager-factory-ref="emf"-->
                     <!--transaction-manager-ref="transactionManager"/>-->

   <context:property-placeholder location="classpath:spring/jdbc.properties"/>
   <bean  id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
      <property name="driverClassName" value="${jdbc.DriverClassName}"/>
      <property name="url" value="${jdbc.url}"/>
      <property name="username" value="${jdbc.username}"/>
      <property name="password" value="${jdbc.password}"/>
   </bean>


</beans>
