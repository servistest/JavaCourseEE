<?xml version="1.0" encoding="UTF-8"?>

<beans:beans
        xmlns="http://www.springframework.org/schema/mvc"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:beans="http://www.springframework.org/schema/beans"
        xmlns:p="http://www.springframework.org/schema/p"
        xmlns:context="http://www.springframework.org/schema/context"
        xmlns:security="http://www.springframework.org/schema/security"
        xmlns:mvc="http://www.springframework.org/schema/tool"

        xsi:schemaLocation="http://www.springframework.org/schema/mvc
              http://www.springframework.org/schema/mvc/spring-mvc.xsd
              http://www.springframework.org/schema/beans
              http://www.springframework.org/schema/beans/spring-beans.xsd
              http://www.springframework.org/schema/context
              http://www.springframework.org/schema/context/spring-context.xsd
              http://www.springframework.org/schema/security
              http://www.springframework.org/schema/security/spring-security.xsd http://www.springframework.org/schema/tool http://www.springframework.org/schema/tool/spring-tool.xsd">

    <!--Дескриптор <annotation-driven> включает поддержку конфигурирования посредством аннотаций для контроллеров Spring MVC,-->
    <!--а также поддержку преобразования типов и форматирования Spring.-->
    <!--Кроме того, этим же дескриптором включается поддержка проверки достоверности бинов JSR-349-->
    <annotation-driven/>

    <!--Дескриптор <resources> определяет статические ресурсы (например, CSS, JavaScript и графические -->
    <!--изображения) вместе с их местоположениями, так что Spring MVC сможет улучшить производительность-->
    <!--при обслуживании этих файлов.-->
    <!--Атрибут location  задает папки для статических ресурсов. Первый путь, /, указывает корневую папку для веб-приложения,-->
    <!--которой является /src/main/webapp-->
    <!--Атрибут mapping определяет URL для отображения на статические ресурсы; в  качестве примера для URL вида -->
    <!--http: //localhost:8080/SpringContactsMVC/resources/styles/standard.css модуль Spring MVC будет извлекать -->
    <!--файл  standard.css из папки /src/main/webapp/styles.-->
    <resources mapping="/resources/**" location="/"/>

    <!--Дескриптор <default-servlet-handler/> разрешает отображение сервлета диспетчера на URL корневого контекста веб-приложения,-->
    <!--по-прежнему позволяя  запросам статических ресурсов обрабатываться сервлетом, который установлен в-->
    <!--контейнере в качестве стандартного.-->
    <!--Используя этот обработчик  диспетчер будет пересылать все запросы к сервлету по умолчанию.-->
    <!--DefaultServletHttpRequestHandler попытается автоматически обнаружить Servlet по умолчанию для контейнера во время запуска,-->
    <!--используя список известных имен для большинства основных Servlet контейнеров (Tomcat, Jetty, GlassFish, JBoss, Resin, WebLogic, and WebSphere)-->
    <!--дескриптор используется , если вы хотите spring dispatcher подавал  статические ресурсы web root, используя по умолчанию сервлет.-->
    <!--If we are using DefaultServletHttpRequestHandler, then we can replace :-->
    <!--<mvc:resources mapping="/js/**" location="/js/" />-->
    <!--<mvc:resources mapping="/css/**" location="/css/" />-->
    <!--<mvc:resources mapping="/images/**" location="/images/" />-->
    <default-servlet-handler/>

    <context:component-scan base-package="edu.mvc"/>

    <!--Для интерфейса ViewResolver  будем использовать класс InternalResourceViewResolver -->
    <!--в качестве реализации. Однако мы   изменим суффикс на .jspx.-->
    <!--<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver" >-->
        <!--<beans:property name="prefix" value="/WEB-INF/views/" />-->
        <!--<beans:property name="suffix" value=".jspx" />-->
    <!--</beans:bean>-->

    <!--Config Apache Tiles-->
    <!--Определяется бин   ViewResolver с классом UrlBasedViewResolver и свойством viewClass, установленным-->
    <!--в класс TilesView, который обеспечивает поддержку Apache Тiles в   Spring МVС.-->
    <beans:bean class="org.springframework.web.servlet.view.UrlBasedViewResolver"
                id="tilesViewResolver">
        <beans:property name="viewClass" value="org.springframework.web.servlet.view.tiles3.TilesView"/>
    </beans:bean>

    <!--Определяем бин tilesConfigurer, который предоставляет  конфигурации компоновки, требуемые для Apache Tiles.-->
    <beans:bean class="org.springframework.web.servlet.view.tiles3.TilesConfigurer" id="tilesConfigurer">
        <beans:property name="definitions">
            <beans:list>
                <beans:value>/WEB-INF/layouts/layouts.xml</beans:value>
                <beans:value>/WEB-INF/views/**/views.xml</beans:value>
            </beans:list>
        </beans:property>

    </beans:bean>


    <!--Здесь определен перехватчик Spring MVC c  классом LocaleChangeInterceptor, который перехватывает все запросы к сервлету диспетчера.-->
    <!--Перехватчик поддерживает переключение локалей с помощью конфигурируемого параметра запроса. В конфигурации перехватчика определен-->
    <!--параметр URL по имени lang, предназначенный для изменения локали, которая применяется в   приложении.-->
    <!--LocaleChangeInterceptor будет перехватывать любые изменения в локали. Эти изменения будут сохранены в cookies для будущего запроса.-->
    <!--Здесь добавлен  перехватчик ThemeChangeInterceptor, который перехватывает  каждый запрос для изменения темы.-->
    <interceptors>
        <beans:bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor" p:paramName="lang"/>
        <beans:bean class="org.springframework.web.servlet.theme.ThemeChangeInterceptor"/>
    </interceptors>

    <!--Бин отвечает за загрузку пакета ресурсов (ResourceBundle) активной темы. Например, если активная тема-->
    <!--называется standard, то этот бин будет искать файл standard.properties как пакет ресурсов данной темы.-->
    <beans:bean class="org.springframework.ui.context.support.ResourceBundleThemeSource" id="themeSource"/>

    <!--Бин, реализованный посредством класса CookieThemeResolver, распознает активную тему для пользователей. Свойство-->
    <!--defaultThemeName определяет тему, используемую по умолчанию, которой  является standard. Для сохранения темы пользователю-->
    <!--в классе CookieThemeResolver применяются сооkiе-наборы. Существует также класс SessionThemeResolver, который обеспечивает-->
    <!--сохранение атрибута темы в   пользовательском сеансе.-->
    <beans:bean class="org.springframework.web.servlet.theme.CookieThemeResolver"
                id="themeResolver"
                p:cookieName="theme"
                p:defaultThemeName="standard"/>

    <!--Класс ReloadableResourceBundleMessageSource реализует интерфейс-->
    <!--MessageSource, который загружает сообщения из определенных файлов (в данном случае это файлы messages* .properties-->
    <!--и application* .properties в папке /WEB-INF/i18n) для поддержки интернационализации. Свойство fallbackToSystemLocale-->
    <!--указывает Spring МVС, нужно ли возвращаться к локали системы, в которой выполняется приложение, если специфический   -->
    <!--пакет ресурсов для клиентской локали не найден.-->
    <beans:bean class="org.springframework.context.support.ReloadableResourceBundleMessageSource"
                id="messageSource"
                p:basenames="WEB-INF/i18n/application,WEB-INF/i18n/messages"
                p:fallbackToSystemLocale="false"/>

    <!--Этот класс поддерживает хранение и извлечение параметров локали из сооkiе-набора  пользовательского браузера-->
    <!--Spring МVС будет сохранять параметр лакали в сооkiе-наборе браузера (с именем locale) и по умолчанию сооkiе-набор будет сохраняться-->
    <!--для сеанса пользователя. Если вы хотите удерживать сооkiе-набор на протяжении более длительного периода времени,-->
    <!--в определении бина localeResolver  необходимо установить свойство cookieMaxAge, которое унаследовано-->
    <!--от класса org. springframework.web.util.CookieGenerator.-->
    <beans:bean class="org.springframework.web.servlet.i18n.CookieLocaleResolver"
                id="localeResolver"
                p:cookieName="locale"/>


</beans:beans>